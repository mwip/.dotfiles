#+STARTUP: content
* Packages
** Install use-package if not installed
   #+BEGIN_SRC emacs-lisp
   (unless (package-installed-p 'use-package)
       ;;(package-refresh-contents)
       (package-install 'use-package))
   #+END_SRC
** Try Packages
   The try package allows to try other package without installing them permanently.
   =M-x RET *package-name* RET=
   #+BEGIN_SRC emacs-lisp
   (use-package try
       :ensure t)
   #+END_SRC
* EVIL
** Assumed configuration previous to evil
   #+begin_src emacs-lisp
   (setq evil-want-keybinding nil) ;; https://github.com/emacs-evil/evil-collection/issues/215
   (setq evil-want-integration t)
   (setq evil-undo-system 'undo-tree)
   (setq evil-want-C-u-scroll t)
   #+end_src

** evil leader
   #+begin_src emacs-lisp
     (use-package evil-leader
       :ensure t)
     (global-evil-leader-mode)
     (evil-leader/set-leader "<SPC>")
   #+end_src
** evil
  #+begin_src emacs-lisp
    (use-package evil
      :ensure t
      :init
      )
    (evil-mode 1)
    (setq evil-want-fine-undo t)
  #+end_src
** evil-collection
   #+begin_src emacs-lisp
     (use-package evil-collection
        :after evil, org
	:ensure t
	:custom (evil-collection-calendar-want-org-bindings t)
	:config
	(add-to-list 'evil-collection-mode-list 'magit)
	(evil-collection-magit-setup))
     (setq evil-magit-state 'normal)
     (evil-collection-init)
   #+end_src
** evil-org
   #+begin_src emacs-lisp
     (use-package evil-org
       :ensure t
       :commands evil-org-mode
       :after org
       :init
       (add-hook 'org-mode-hook 'evil-org-mode)
       :config
       (add-hook 'evil-org-mode-hook
		 (lambda ()
		   (evil-org-set-key-theme '(textobjects insert navigation additional shift
							 todo)))))
     (require 'evil-org-agenda)
     (evil-org-agenda-set-keys)
   #+end_src
* General Configurations
** Spaces! no tabs!
   #+begin_src emacs-lisp
     (setq-default indent-tabs-mode nil)
   #+end_src
** All the Icons
   #+begin_src emacs-lisp
     (use-package all-the-icons
       :ensure t
       :if (display-graphic-p)
       )
   #+end_src
** completion with vertico, orderles & marginalia 
   #+begin_src emacs-lisp
     ;; from https://github.com/minad/vertico
     ;; Enable vertico
     (use-package vertico
       :ensure t
       :init
       (vertico-mode)

       ;; Grow and shrink the Vertico minibuffer
       (setq vertico-resize t)

       ;; Optionally enable cycling for `vertico-next' and `vertico-previous'.
       ;; (setq vertico-cycle t)
       )

     ;; Optionally use the `orderless' completion style. See
     ;; `+orderless-dispatch' in the Consult wiki for an advanced Orderless style
     ;; dispatcher. Additionally enable `partial-completion' for file path
     ;; expansion. `partial-completion' is important for wildcard support.
     ;; Multiple files can be opened at once with `find-file' if you enter a
     ;; wildcard. You may also give the `initials' completion style a try.
     (use-package orderless
       :ensure t
       :init
       ;; Configure a custom style dispatcher (see the Consult wiki)
       ;; (setq orderless-style-dispatchers '(+orderless-dispatch)
       ;;       orderless-component-separator #'orderless-escapable-split-on-space)
       (setq completion-styles '(orderless)
             completion-category-defaults nil
             completion-category-overrides '((file (styles partial-completion)))
             read-file-name-completion-ignore-case t
             read-buffer-completion-ignore-case t
             completion-ignore-case t))

     ;; Persist history over Emacs restarts. Vertico sorts by history position.
     (use-package savehist
       :ensure t
       :init
       (savehist-mode))

     ;; from https://github.com/minad/marginalia/
     ;; Enable richer annotations using the Marginalia package
     (use-package marginalia
       :ensure t
       ;; Either bind `marginalia-cycle` globally or only in the minibuffer
       :bind (("M-A" . marginalia-cycle)
              :map minibuffer-local-map
              ("M-A" . marginalia-cycle))

       ;; The :init configuration is always executed (Not lazy!)
       :init

       ;; Must be in the :init section of use-package such that the mode gets
       ;; enabled right away. Note that this forces loading the package.
       (marginalia-mode))
   #+end_src
** =company=
   Auto-completion with company-mode
   #+begin_src emacs-lisp
	   (use-package company
	     :ensure t
	     :config 
	     (setq company-idle-delay 0)
	     (setq company-minimum-prefix-length 3)
	     (setq company-selection-wrap-around t)
	     (setq company-tooltip-align-annotations t)
	     (setq company-tooltip-limit 10)

	     (global-company-mode t)
	)
	   ;; disable company in org-files
	   (setq company-global-modes '(not org-mode))
     ;;(require 'color)

     ;;(let ((bg (face-attribute 'default :background)))
       ;;(custom-set-faces
	;;`(company-tooltip ((t (:inherit default :background ,(color-lighten-name bg 4)))))
	;;`(company-scrollbar-bg ((t (:background ,(color-lighten-name bg 10)))))
	;;`(company-scrollbar-fg ((t (:background ,(color-lighten-name bg 5)))))
	;;`(company-tooltip-selection ((t (:inherit font-lock-function-name-face))))
	;;`(company-tooltip-common ((t (:inherit font-lock-constant-face))))))
   #+END_SRC
** Key-Chord explanations
   Lists all the options of shortcuts after a while
   #+BEGIN_SRC emacs-lisp
   (use-package which-key
       :ensure t
       :config 
       ;; Allow C-h to trigger which-key before it is done automatically
       (setq which-key-show-early-on-C-h t)
       ;; make sure which-key doesn't show normally but refreshes quickly after it is
       ;; triggered.
       (setq which-key-idle-delay 10)
       (setq which-key-idle-secondary-delay 0.05)
       (which-key-mode))
   #+END_SRC
** Quick search with two characters
   Navigate by using TWO characters
   #+BEGIN_SRC emacs-lisp
   (use-package avy
     :ensure t
     :bind ("M-s" . avy-goto-char-2))   
   #+END_SRC
** Window switching
*** Use =super + <left>= (...) to switch windows
    #+begin_src emacs-lisp
    (windmove-default-keybindings 'super)
    #+end_src
*** COMMENT Makes window changing look nicer
    -- ditched for evil-mode
    #+BEGIN_SRC emacs-lisp
    (use-package ace-window
       :ensure t
       :init
       (progn
       (global-set-key [remap other-window] 'ace-window)
       (custom-set-faces
       '(aw-leading-char-face
       ((t (:inherit ace-jump-face-foreground :height 3.0))))) 
     ))  
    #+END_SRC 
** COMMENT Ido-Mode
   #+BEGIN_SRC emacs-lisp
   (setq ido-enable-flex-matching t)
   (setq ido-everywhere t)
   (setq ido-use-filename-at-point 'guess)
   (ido-mode 1)
   ;;(use-package ido-vertical-mode
   ;;  :ensure t)
   ;;(ido-vertical-mode 1)
   #+END_SRC
** Line wrapping
   #+begin_src emacs-lisp
   (visual-line-mode)
   #+END_SRC
** Buffer list
   Change how buffers are listed in with =C-x b=
   #+BEGIN_SRC emacs-lisp
   (defalias 'list-buffers 'ibuffer)
   #+END_SRC
** Theme
   adjust the theme
   #+BEGIN_SRC emacs-lisp
   ;;(load-theme 'railscast t t)
   ;;(enable-theme 'railscast)
   #+END_SRC
*** Doom-Theme
    #+begin_src emacs-lisp
      ;;(add-to-list 'load-path "~/")
      (use-package doom-modeline
	:ensure t
	:init (doom-modeline-mode 1))
      (setq doom-modeline-icon t)
      (use-package doom-themes
	:ensure t
	:config
	;; Global settings (defaults)
	(setq doom-themes-enable-bold t    ; if nil, bold is universally disabled
	      doom-themes-enable-italic t) ; if nil, italics is universally disabled
	(load-theme 'doom-vibrant t) ;;+ 
	;; or for treemacs users
	;; (setq doom-themes-treemacs-theme "doom-colors") ; use the colorful treemacs theme
	;; (doom-themes-treemacs-config)
	;; Corrects (and improves) org-mode's native fontification.
	(doom-themes-org-config))
    #+end_src
** Font
   #+BEGIN_SRC emacs-lisp
   (add-to-list 'default-frame-alist '(font . "Code New Roman Nerd Font Mono 12" ))
   (set-face-attribute 'default t :font "Code New Roman Nerd Font Mono 12" )
   ;;(set-default-font "Code New Roman Nerd Font Mono 13")
   #+END_SRC
** Cursor
   #+begin_src emacs-lisp
   (setq-default cursor-type '(bar . 3))
   (global-hl-line-mode)
   ;;(set-face-background hl-line-face "gray25")
   #+END_SRC
** Avoid beeping
   #+begin_src emacs-lisp
   (setq ring-bell-function 'ignore)
   #+END_SRC
** COMMENT Replace startup message with Dashboard
   #+BEGIN_SRC emacs-lisp
     (setq inhibit-startup-message t)
     (use-package dashboard
       :ensure t
       :config
       (dashboard-setup-startup-hook))
   #+END_SRC
** Remove Toolbar
   Remove the toolbar at the top of the window
   #+BEGIN_SRC emacs-lisp
   (tool-bar-mode -1)   
   (menu-bar-mode -1)
   (scroll-bar-mode -1)
   #+END_SRC
** Answer questions with y and n
   Questions have no longer to be answered wtih the full words "yes" and "no" but only "y" and "n"
   #+BEGIN_SRC emacs-lisp
   (fset 'yes-or-no-p 'y-or-n-p)
   #+END_SRC
** Better connection between the system clipboard and the emacs killring
   #+begin_src emacs-lisp
   (setq save-interprogram-paste-before-kill t)
   #+END_SRC
** Line-Numbers
   #+BEGIN_SRC emacs-lisp
     ;; (when (version<= "26.0.50" emacs-version)
     ;;       (global-display-line-numbers-mode))
     (require 'display-line-numbers)
     (defcustom display-line-numbers-exempt-modes '(vterm-mode eshell-mode shell-mode term-mode ansi-term-mode mu4e-main-mode mu4e-headers-mode org-mode org-agenda-mode)
       "Major modes on which to disable the linum mode, exempts them from global requirement"
       :group 'display-line-numbers
       :type 'list
       :version "green")

     (defun display-line-numbers--turn-on ()
       "turn on line numbers but excempting certain majore modes defined in `display-line-numbers-exempt-modes'"
       (if (and
	    (not (member major-mode display-line-numbers-exempt-modes))
	    (not (minibufferp)))
	   (display-line-numbers-mode)))

     (global-display-line-numbers-mode)
   #+END_SRC
** Undo Tree
   #+begin_src emacs-lisp
     (use-package undo-tree
       :ensure t
       :config
       (global-undo-tree-mode))

   #+END_SRC
** Auto-revert
   auto-revert when file changed 
   useful for org syncronization
   #+begin_src emacs-lisp
   (global-auto-revert-mode 1) ;; auto revert from file
   (setq auto-revert-verbose nil) ;; suppress the verbose
   #+END_SRC

** Line wrapping
   #+begin_src emacs-lisp
     (use-package adaptive-wrap
       :ensure t)
     (when (fboundp 'adaptive-wrap-prefix-mode)
       (defun my-activate-adaptive-wrap-prefix-mode ()
	 "Toggle `visual-line-mode' and `adaptive-wrap-prefix-mode' simultaneously."
	 (adaptive-wrap-prefix-mode (if visual-line-mode 1 -1)))
       (add-hook 'visual-line-mode-hook 'my-activate-adaptive-wrap-prefix-mode))
     (global-visual-line-mode)
     (adaptive-wrap-prefix-mode)
     (add-hook 'org-agenda-mode-hook
	       (lambda ()
		 (visual-line-mode -1)
		 (toggle-truncate-lines 1)))
   #+end_src
** System locale
   #+begin_src emacs-lisp
   (setq system-time-locale "C") 
   #+end_src
   
** Move autosave files to tmp
   [[https://emacsredux.com/blog/2013/05/09/keep-backup-and-auto-save-files-out-of-the-way/][found here]]
   #+begin_src emacs-lisp
     ;; store all backup and autosave files in the tmp dir
     (setq backup-directory-alist
	   `((".*" . ,temporary-file-directory)))
     (setq auto-save-file-name-transforms
	   `((".*" ,temporary-file-directory t)))

   #+end_src

** Full screen
   #+begin_src emacs-lisp
   (add-to-list 'default-frame-alist '(fullscreen . maximized))
   #+end_src
** Show Colors as background
   #+BEGIN_SRC emacs-lisp
     (defvar hexcolour-keywords
       '(("#[ABCDEFabcdef[:digit:]]\\{6\\}"
	  (0 (put-text-property (match-beginning 0)
				(match-end 0)
				'face (list :background
					    (match-string-no-properties 0)))))))
     (defun hexcolour-add-to-font-lock ()
       (font-lock-add-keywords nil hexcolour-keywords))
     
     (add-hook 'prog-mode-hook 'hexcolour-add-to-font-lock)
     (add-hook 'python-mode-hook 'hexcolour-add-to-font-lock)
     (add-hook 'org-mode-hook 'hexcolour-add-to-font-lock)
     (add-hook 'text-mode-hook 'hexcolour-add-to-font-lock)
   #+END_SRC
** Languagetool support
   #+begin_src emacs-lisp
     (use-package langtool
       :ensure t
       :config
       (setq langtool-http-server-host	"localhost"
          langtool-http-server-port 8081
	     langtool-disabled-rules '("WHITESPACE_RULE" 
				       "LEERZEICHEN_VOR_AUSRUFEZEICHEN_ETC")
	     )
     )
   #+end_src
** Auto dim other buffers
   #+BEGIN_SRC emacs-lisp
   (use-package auto-dim-other-buffers
      :ensure t)
   (auto-dim-other-buffers-mode)
   #+END_SRC
** Openwith
   #+begin_src emacs-lisp
   (use-package openwith
     :ensure t)
   (openwith-mode t)
   (setq openwith-associations '(("\\.pdf\\'" "zathura" (file))))
  #+end_src
** Darkroom (focus reading)
    #+BEGIN_SRC emacs-lisp
      (use-package darkroom
	:ensure t)
      (setq darkroom-margins 0.1)
    #+END_SRC
** Auto-save_mode
   #+begin_src emacs-lisp
     (setq auto-save-default t)
     (auto-save-visited-mode)
     (setq auto-save-visited-interval 30)
     (setq auto-save-visited 30)
   #+end_src
** Highlight trailing whitespace
   #+begin_src emacs-lisp
     ;; can be deactivated with F8
     (setq-default show-trailing-whitespace t)
   #+end_src
** Ledger Mode
   #+begin_src emacs-lisp
	  (use-package ledger-mode
	    :ensure t)
     (add-to-list 'auto-mode-alist '("\.dat$" . ledger-mode))
   #+end_src

* mu4e
   #+begin_src emacs-lisp
     (require 'mu4e)
     (use-package mu4e-alert
       :ensure t)
     (evil-collection-init 'mu4e)
     (setq doom-modeline-mu4e t)
     (setq mu4e-enable-notifications t)
     (add-hook 'after-init-hook #'mu4e-alert-enable-mode-line-display)
     ;; use mu4e for e-mail in emacs
     (setq mail-user-agent 'mu4e-user-agent)

     (setq mu4e-maildir "~/Mail/mbsyncmail/protonmail"
	   mu4e-attachment-dir "~/Downloads")

     (setq user-mail-address "matthias.weigand@protonmail.com"
	   user-full-name  "Matthias Weigand")

     ;; Get mail
     (setq mu4e-get-mail-command "mbsync -c ~/.config/mbsync/mbsyncrc protonmail"
	   mu4e-change-filenames-when-moving t   ; needed for mbsync
	   mu4e-update-interval 300)             ; update every 2 minutes

     ;; Send mail
     (setq message-send-mail-function 'smtpmail-send-it
	   smtpmail-auth-credentials "~/.authinfo"
	   smtpmail-smtp-server "127.0.0.1"
	   smtpmail-stream-type 'starttls
	   smtpmail-smtp-service 1029)

     (with-eval-after-load 'gnutls
       (add-to-list 'gnutls-trustfiles (expand-file-name "~/.config/protonmail/bridge/cert.pem")))
     ;; the next are relative to the root maildir
     ;; (see `mu info`).
     ;; instead of strings, they can be functions too, see
     ;; their docstring or the chapter 'Dynamic folders'
     (setq mu4e-sent-folder   "/Sent"
	   mu4e-refile-folder "/Archive"
	   mu4e-drafts-folder "/Drafts"
	   mu4e-trash-folder  "/Trash")

     ;; the maildirs you use frequently; access them with 'j' ('jump')
     (setq   mu4e-maildir-shortcuts
	 '((:maildir "/Archive" :key ?a)
	   (:maildir "/INBOX"   :key ?i)
	   (:maildir "/Sent"    :key ?s)))
     (define-key mu4e-headers-mode-map (kbd "C-c c") 'mu4e-org-store-and-capture)
     (define-key mu4e-view-mode-map (kbd "C-c c") 'mu4e-org-store-and-capture)
     (setq mu4e-html2text-command "w3m -I %{UTF-8} -dump -T text/html")
     
     (setq mu4e-headers-include-related nil)
     (setq mu4e-headers-show-threads nil)
     ;; avoid interference with mu4e attachments
     (add-to-list 'mm-inhibit-file-name-handlers 'openwith-file-handler)
     (setq mu4e-headers-precise-alignment t)
     (setq gnus-blocked-images "http") ;; https://github.com/djcb/mu/issues/1434
    #+end_src
    

* coding-related configuration
** Snippets
   See [[https://joaotavora.github.io/yasnippet/snippet-development.html][here]] how to write your own snippets
   Paste the snippets in =.emacs.d/snippets/=
   #+BEGIN_SRC emacs-lisp
   (use-package yasnippet
     :ensure t
     :init
     (yas-global-mode 1))
   (use-package yasnippet-snippets
     :ensure t)
   #+END_SRC
** projects with projectile
   see [[https://projectile.readthedocs.io/en/latest/usage/][Documentaiton]]
   #+begin_src emacs-lisp
     (use-package projectile
       :ensure t
       :config
       (define-key projectile-mode-map (kbd "s-p") 'projectile-command-map)
       (define-key projectile-mode-map (kbd "C-c p") 'projectile-command-map)
       (projectile-mode +1))
     (use-package counsel-projectile
       :ensure t
       :config
       (counsel-projectile-mode))
     ;; install ag for search
     ;; (use-package ag
       ;; :ensure t)
     (counsel-projectile-modify-action
      'counsel-projectile-switch-project-action
      '((default counsel-projectile-switch-project-action-vc)))
   #+END_SRC
** COMMENT dumb jump
   #+begin_src emacs-lisp
   (use-package dumb-jump
   :ensure t
   :bind 
      (("M-g o" . dumb-jump-go-other-window)
      ("M-g j" . dumb-jump-go)
      ("M-g x" . dumb-jump-go-prefer-external)
      ("M-g z" . dumb-jump-go-prefer-external-other-window))
   :config (setq dumb-jump-selector 'ivy) ;; (setq dumb-jump-selector 'helm)
   :init
   (dumb-jump-mode))
   #+END_SRC
** Code Margin 100-column
    #+BEGIN_SRC emacs-lisp
      ;;  (use-package fill-column-indicator
      ;;    :ensure t
      ;;    :config
      ;;    (setq fci-rule-column 100)
      ;;    (setq fci-rule-width 1)
      ;;    (setq fci-rule-color "gray23")
      ;;  )
      (add-hook 'prog-mode-hook 'display-fill-column-indicator-mode)
      (add-hook 'python-mode-hook 'display-fill-column-indicator-mode)
      (add-hook 'haskell-mode-hook 'display-fill-column-indicator-mode)
      (add-hook 'ess-mode-hook 'display-fill-column-indicator-mode)
   #+END_SRC
** Auto-Pairs
   Fill in closing brackets, quotes and stuff when typing the opening one
   #+BEGIN_SRC emacs-lisp
     ;;(use-package autopair
     ;;  :ensure t)
     ;;(electric-pair-mode)
     ;;(setq autopair-skip-whitespace t)
     (use-package smartparens
       :ensure t
       :init
       (require 'smartparens-config)
       :config
       (require 'smartparens)
       (sp-pair "(" ")" :unless '(sp-point-before-word-p))
       (sp-pair "{" "}" :unless '(sp-point-before-word-p))
       (sp-pair "[" "]" :unless '(sp-point-before-word-p))
       (sp-pair "'" "'" :unless '(sp-point-before-word-p))
       (sp-pair "\"" "\"" :unless '(sp-point-before-word-p))
       (smartparens-global-mode))
   #+END_SRC
** Hightligh Paris of Parenthesis
   #+BEGIN_SRC emacs-lisp
   (show-paren-mode 1)
   (setq show-paren-delay 0)
   (use-package rainbow-delimiters
     :ensure t)
     (add-hook 'prog-mode-hook #'rainbow-delimiters-mode)
     (add-hook 'org-mode-hook #'rainbow-delimiters-mode)
   #+END_SRC
** Syntax checking 
   Using [[https://www.flycheck.org][Flycheck]]
   Needs the R-Package =lintr= to be installed: 
   =install.packages("lintr")=
   #+BEGIN_SRC emacs-lisp
   (use-package flycheck
     :ensure t
     :init (global-flycheck-mode))
   #+END_SRC
** Multi-cursor
   #+BEGIN_SRC emacs-lisp
     (use-package multiple-cursors
       :ensure t
       :config
       (global-set-key (kbd "C->") 'mc/mark-next-like-this)
       (global-set-key (kbd "C-<") 'mc/mark-previous-like-this)
       (global-set-key (kbd "C-c C-<") 'mc/mark-all-like-this)
       (global-unset-key (kbd "M-<mouse-1>"))
       (global-set-key (kbd "C-M-<mouse-1>") 'mc/add-cursor-on-click)
       (define-key mc/keymap (kbd "<return>") nil) ;; stop multi-cursor with C-g not enter
       (setq mc/always-run-for-all t))
   #+END_SRC
** Git-Gutter 
   Shows little indicators of changes at the left edge in gitted files
   #+begin_src emacs-lisp
     (use-package git-gutter
       :ensure t
       :config
       (global-git-gutter-mode t))
   #+end_src
** Magit
   #+begin_src emacs-lisp
   (use-package magit
      :ensure t
      :init
      (progn (bind-key "C-x g" 'magit-status))
      :config
      (setq magit-diff-refine-hunk (quote all)))
   #+end_src
*** Support for bare dotfiles repo
    Creds to https://emacs.stackexchange.com/a/58859/24163
    #+begin_src emacs-lisp
      ;; prepare the arguments
      (setq dotfiles-git-dir (concat "--git-dir=" (expand-file-name "~/.dotfiles")))
      (setq dotfiles-work-tree (concat "--work-tree=" (expand-file-name "~")))

      ;; function to start magit on dotfiles
      (defun dotfiles-magit-status ()
	(interactive)
	(add-to-list 'magit-git-global-arguments dotfiles-git-dir)
	(add-to-list 'magit-git-global-arguments dotfiles-work-tree)
	(call-interactively 'magit-status))

      ;; wrapper to remove additional args before starting magit
      (defun magit-status-with-removed-dotfiles-args ()
	(interactive)
	(setq magit-git-global-arguments (remove dotfiles-git-dir magit-git-global-arguments))
	(setq magit-git-global-arguments (remove dotfiles-work-tree magit-git-global-arguments))
	(call-interactively 'magit-status))
      ;; redirect global magit hotkey to our wrapper
      (global-set-key (kbd "C-x g") 'magit-status-with-removed-dotfiles-args)
      ;;(define-key magit-file-mode-map (kbd "C-x g") 'magit-status-with-removed-dotfiles-args)
    #+end_src
** Auto highlight
   #+begin_src emacs-lisp
     (use-package auto-highlight-symbol
       :ensure t)
     ;;(global-auto-highlight-symbol-mode t)
     (define-key auto-highlight-symbol-mode-map (kbd "M-<left>") nil)
     (define-key auto-highlight-symbol-mode-map (kbd "M-<right>") nil)
     (define-key auto-highlight-symbol-mode-map (kbd "M-p") 'ahs-backward)
     (define-key auto-highlight-symbol-mode-map (kbd "M-n") 'ahs-forward)
     (setq ahs-idle-interval 1.0) ;; if you want instant highlighting, set it to 0, but I find it annoying
     (setq ahs-default-range 'ahs-range-whole-buffer) ;; highlight every occurence in buffer

     ;; inhibits highlighting in specific places, like in comments
     (setq ahs-inhibit-face-list '(font-lock-comment-delimiter-face
				   font-lock-comment-face
				   font-lock-doc-face
				   font-lock-doc-string-face
				   font-lock-string-face
				   ))
     ;;(add-hook 'org-mode-hook 'auto-highlight-symbol-mode)
   #+end_src
** Move line up/down
   #+begin_src emacs-lisp
     (defun move-line-up ()
       (interactive)
       (transpose-lines 1)
       (forward-line -2))

     (defun move-line-down ()
       (interactive)
       (forward-line 1)
       (transpose-lines 1)
       (forward-line -1))

     (global-set-key (kbd "C-M-<up>") 'move-line-up)
     (global-set-key (kbd "C-M-<down>") 'move-line-down)
   #+end_src
** Haskell-mode
   #+begin_src emacs-lisp
   (use-package haskell-mode
     :ensure t)
   #+end_src
** Column numbers
   #+begin_src emacs-lisp
   (setq column-number-mode t)
   #+end_src
** Auto Fill
   #+BEGIN_SRC emacs-lisp
     (add-hook 'text-mode-hook 'turn-on-auto-fill)
     (setq-default fill-column 100)
     (defun my-magit-turn-on-auto-fill ()
       (setq fill-column 72)
       (turn-on-auto-fill))
     (add-hook 'magit-log-edit-mode-hook 'my-magit-turn-on-auto-fill)
     (add-hook 'git-commit-mode-hook 'my-magit-turn-on-auto-fill)
   #+END_SRC
** Dockerfile mode
    #+BEGIN_SRC emacs-lisp
    (use-package dockerfile-mode
      :ensure t)
    #+END_SRC
** Julia-mode
   #+begin_src emacs-lisp
     (use-package julia-mode
       :ensure t)
     (setenv "JULIA_NUM_THREADS" "12")
     (use-package julia-repl
       :ensure t)
     (add-hook 'julia-mode-hook 'julia-repl-mode)
   #+end_src
** Highligh TODO comments
   #+begin_src emacs-lisp
     (use-package fic-mode
       :ensure t
       :config (add-hook 'prog-mode-hook 'fic-mode))
   #+end_src
** Markdown Mode
   #+begin_src emacs-lisp
   (use-package markdown-mode
     :ensure t)
   #+end_src

* R-Related Configuration
** Force scroll on R-console
   #+BEGIN_SRC emacs-lisp
   (setq comint-croll-to-bottom-on-input t)
   (setq comint-croll-to-bottom-on-output t)
   #+END_SRC
** Use Rstudio indentions
   #+BEGIN_SRC emacs-lisp
   (setq ess-style 'RStudio)
   #+END_SRC
** Key binding for evaluation
   #+begin_src emacs-lisp
     (use-package ess
       :ensure t)
     (require 'ess-mode)
     (define-key ess-mode-map (kbd "<C-return>") 'ess-eval-region-or-function-or-paragraph-and-step)
     (define-key ess-mode-map (kbd "<C-enter>") 'ess-eval-region-or-function-or-paragraph-and-step)
   #+end_src
** Expand region
   #+BEGIN_SRC emacs-lisp
   (use-package expand-region
     :ensure t
     :config
     (global-set-key (kbd "<C-S-up>") 'er/expand-region)
     (global-set-key (kbd "<C-S-down>") (kbd "C-- <C-S-up>")))
   #+END_SRC
** Insert Pipe
   Found [[https://emacs.stackexchange.com/questions/8041/how-to-implement-the-piping-operator-in-ess-mode][here]]
   #+BEGIN_SRC emacs-lisp
   (defun then_R_operator ()
                "R - %>% operator or 'then' pipe operator"
                (interactive)
                (just-one-space 1)
                (insert "%>%")
                (reindent-then-newline-and-indent))
   (global-set-key (kbd "C-S-m") 'then_R_operator)
   #+END_SRC
** ESS-Fontlock
   #+begin_src emacs-lisp
     (setq ess-R-font-lock-keywords
                                  (quote ((ess-R-fl-keyword:keywords . t)
                                                  (ess-R-fl-keyword:constants . t)
                                                  (ess-R-fl-keyword:modifiers . t)
                                                  (ess-R-fl-keyword:fun-defs . t)
                                                  (ess-R-fl-keyword:assign-ops . t)
                                                  (ess-R-fl-keyword:%op% . t)
                                                  (ess-fl-keyword:fun-calls . t)
                                                  (ess-fl-keyword:numbers . t)
                                                  (ess-fl-keyword:operators . t)
                                                  (ess-fl-keyword:delimiters . t)
                                                  (ess-fl-keyword:= . t)
                                                  (ess-R-fl-keyword:F&T . t))))
 
   #+end_src
* Python-related config
  
** Elpy
   #+begin_src emacs-lisp
     (use-package elpy
       :ensure t
       :config
       (elpy-enable))
     (add-hook 'elpy-mode-hook (lambda ()
				 (add-hook 'before-save-hook
					   'elpy-black-fix-code nil t)))
   #+end_src 
** Pyvenv
   #+begin_src emacs-lisp
     (use-package pyvenv
       :ensure t
       :init
       (setenv "WORKON_HOME" "/home/loki/miniforge3/envs")
       ;;(add-to-list 'exec-path "~/miniconda3/bin")
       ;;(setenv "PATH" "~/miniconda3/bin:$PATH")
       :config
       (defalias 'workon 'pyvenv-workon)
       )
   #+end_src
** Isort
   #+begin_src emacs-lisp
     (use-package py-isort
       :ensure t
       :config (setq py-isort-options '("--profile=black"))
       (add-hook 'before-save-hook 'py-isort-before-save)
     )
   #+end_src
* Org-Mode Configuration
** Require org-mode
   #+BEGIN_SRC emacs-lisp
   (require 'org)
   #+END_SRC
** Hard indentation
   see https://orgmode.org/org.html#Hard-indentation
   #+begin_src emacs-lisp
     (setq org-adapt-indentation t)
   #+end_src
** COMMENT Org-bullets
   Nice bullet points for org mode
   #+BEGIN_SRC emacs-lisp
   (use-package org-bullets
      :ensure t
      :config (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1))))   
   #+END_SRC
** Hide Leading stars
   #+begin_src emacs-lisp
   (setq org-hide-leading-stars t)
   #+end_src
** Require org-inlinetask
   #+begin_src emacs-lisp
   (require 'org-inlinetask)
   #+end_src
** Restore easy snippets
   #+BEGIN_SRC emacs-lisp
   (require 'org-tempo)
   #+END_SRC
** use org with all .org files
   #+BEGIN_SRC emacs-lisp
   (add-to-list 'auto-mode-alist '("\\.org$" . org-mode))
   #+END_SRC
** My Org todo rotation
   =C-c C-t= will trigger a selection how to mark todo items
  #+BEGIN_SRC emacs-lisp
  (setq org-todo-keywords
     '((sequence "TODO(t)" "NEXT(n)" "IN-PROGRESS(i)" "WAIT(w@/!)" "MAYBE(m)" "SOMEDAY(s)" "PROJ(p)" "READ(r)" "PUT-INTO-PAPER(a)" "|" "DONE(d)" "CANCELLED(c@/!)" "FINISHED-PROJ(f@)")))
   #+END_SRC
** Monday is the first day in Calendar week
   #+begin_src emacs-lisp
   (setq calendar-week-start-day 1)
   #+end_src
** Add timestamp when DONE
   #+BEGIN_SRC emacs-lisp
   (setq org-log-done 'time)
   #+END_SRC
** Enable Logbook
   #+begin_src emacs-lisp
   (setq org-log-into-drawer t)
   #+end_src
** Log rescheduling
   #+begin_src emacs-lisp
   (setq org-log-reschedule 'time)
   #+end_src

** Refile
   Allow refiling to all org-agenda-files
   #+begin_src emacs-lisp
   (setq org-refile-targets '((org-agenda-files . (:maxlevel . 6))))
   #+end_src
** Custom Agenda Views
   #+begin_src emacs-lisp
     (setq org-agenda-custom-commands
	   '(("c" . "My Custom Agendas")
	     ("cu" "Unscheduled items"
	      ((todo ""
		     ((org-agenda-overriding-header "\nUnscheduled items")
		      (org-agenda-skip-function
		       '(org-agenda-skip-entry-if
			 'timestamp
			 'todo '("PROJ" "READ"))))))
	      nil nil) 
	     ("co" "Overdue items"
	      ((tags "DEADLINE<\"<today>\""
		     ((org-agenda-overriding-header "\nOverdue items")
		      (org-agenda-skip-function '(org-agenda-skip-entry-if 'todo 'done)))))
	      nil nil)
	     ("cw" "Waiting items"
	      ((todo "WAIT"
		     ((org-agenda-overriding-header "\nWaiting items")))))
	     ("cp" "Projects list"
	      ((todo "PROJ"
		     ((org-agenda-overriding-header "\nProjects list")))))
	     ("cW" "Completed and/or deferred tasks from previous week"
	      ((agenda "" ((org-agenda-span 7)
			   (org-agenda-start-day "-7d")
			   (org-agenda-entry-types '(:timestamp))
			   (org-agenda-show-log t)))))
	     ("cr" "Papers to read"
	      ((todo "READ"
		     ((org-agenda-overriding-header "\nPapers to read")
		      (org-agenda-skip-function '(org-agenda-skip-entry-if 'timestamp))))))
	     ("cn" "Next actions to move things forward"
	      ((todo "NEXT"
		     ((org-agenda-overriding-header "Next actions list")))))
	     ("cN" "Unschedulded Next actions"
	      ((todo "NEXT"
		     ((org-agenda-overriding-header "Next actions list (unscheduled)")
		      (org-agenda-skip-function '(org-agenda-skip-entry-if 'timestamp))))))
	     ))
   #+end_src

** Deadline warning days
   #+begin_src emacs-lisp
     (setq org-deadline-warning-days 7)
   #+end_src
** COMMENT Org Edna
   #+begin_src emacs-lisp
     (use-package org-edna
       :ensure t
       :config
       (org-edna-load))
   #+end_src
** Org-ref
   #+BEGIN_SRC emacs-lisp
     (use-package org-ref
       :ensure t)
     (setq org-latex-pdf-process
	   '("pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f"
	     "bibtex %b"
	     "pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f"
	     "pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f"))
     (setq org-latex-prefer-user-labels t)
     (setq org-ref-default-citation-link "citep")
     (define-key org-mode-map (kbd "C-c ]") 'org-ref-insert-link)
   #+END_SRC

** Capture
   #+begin_src emacs-lisp
  (global-set-key (kbd "C-c c") 'org-capture)
  (setq org-capture-templates
     '(("t" "TODO Item" entry (file+headline "~/myorg.org" "INBOX")
"** TODO %?
   DEADLINE: %^t
")
       ("p" "Paper to read" entry (file+headline "~/myorg.org" "INBOX")
"** READ [[file:~/Literatur/%^{Enter PDF-Filename (relative to ~/Literatur)}][%^{Enter a link display name}]]
   CONTEXT: %^{Which context is this paper for}
")
       ("l" "Link to read" entry (file+headline "~/myorg.org" "INBOX")
"** READ %^{Enter Link}
   CONTEXT: %^{Context of the link}
")
       ("P" "New Project" entry(file+headline "~/myorg.org" "INBOX")
"** PROJ %^{What is the project name?}
   DEADLINE: %^t
   :PROPERTIES:
   :PURPOSE: %^{What is the purpose of the project?}
   :VISION: %^{What is the vision of the project?}
   :Bainstorm:
   %?
   :END:
 *** TODO What is the very next thing that needs to happen?
    SCHEDULED: %^T
    must be specific, what needs to be done? ('Set meeting is not sufficient')
")))
   #+end_src
** System wide capture
   #+begin_src emacs-lisp
     (defadvice org-switch-to-buffer-other-window
	 (after supress-window-splitting activate)
       "Delete the extra window if we're in a capture frame"
       (if (equal "capture" (frame-parameter nil 'name))
	   (delete-other-windows)))

     (defadvice org-capture-finalize
	 (after delete-capture-frame activate)
       "Advise capture-finalize to close the frame"
       (when (and (equal "capture" (frame-parameter nil 'name))
		  (not (eq this-command 'org-capture-refile)))
	 (delete-frame)))

     (defadvice org-capture-refile
	 (after delete-capture-frame activate)
       "Advise org-refile to close the frame"
       (delete-frame))

     (defun activate-capture-frame ()
       "run org-capture in capture frame"
       (select-frame-by-name "capture")
       (switch-to-buffer (get-buffer-create "*scratch*"))
       (org-capture)) 
   #+end_src
** Agenda: Skip scheduled when deadline is shown
   see [[https://superuser.com/questions/501440/emacs-org-mode-how-to-avoid-duplicate-lines-in-agenda-when-items-is-scheduled][this SE post]]
   #+BEGIN_SRC emacs-lisp
   (setq org-agenda-skip-deadline-prewarning-if-scheduled t)
   (setq org-agenda-skip-scheduled-if-deadline-is-shown "not-today")
   #+END_SRC
** Agenda include Archive
   #+BEGIN_SRC emacs-lisp
   (setq org-agenda-archives-mode t)
   #+END_SRC

** COMMENT PDF-tools
   #+begin_src emacs-lisp
   (use-package pdf-tools
     :ensure t)
   #+end_src
** Org-Export LaTeX Classes
   #+begin_src emacs-lisp
     (with-eval-after-load 'ox-latex
	(add-to-list 'org-latex-classes
		     '("elsarticle"
		       "\\documentclass{elsarticle}"
		       ("\\section{%s}" . "\\section*{%s}")
		       ("\\subsection{%s}" . "\\subsection*{%s}")
		       ("\\subsubsection{%s}" . "\\subsubsection*{%s}"))))
     (with-eval-after-load 'ox-latex
	(add-to-list 'org-latex-classes
		     '("extarticle"
		       "\\documentclass{extarticle}"
		       ("\\section{%s}" . "\\section*{%s}")
		       ("\\subsection{%s}" . "\\subsection*{%s}")
		       ("\\subsubsection{%s}" . "\\subsubsection*{%s}"))))
     (with-eval-after-load 'ox-latex
	(add-to-list 'org-latex-classes
		     '("cas-dc"
		       "\\documentclass{cas-dc}"
		       ("\\section{%s}" . "\\section*{%s}")
		       ("\\subsection{%s}" . "\\subsection*{%s}")
		       ("\\subsubsection{%s}" . "\\subsubsection*{%s}"))))
   #+end_src

* Custom Shortcuts
  
** COMMENT Remap C-z to undo
   -- ditched in favor of evil
   #+BEGIN_SRC emacs-lisp
   (global-unset-key (kbd "C-z"))
   (global-set-key (kbd "C-z") 'undo-tree-undo)
   #+END_SRC
** COMMENT C-d to delete line
   -- ditched in favor of evil
   #+begin_src emacs-lisp
   (global-unset-key (kbd "C-d"))
   (global-set-key (kbd "C-d") 'kill-whole-line)
   #+end_src
** Custom Key Map
*** Initialize keymap on =C-m=
     #+BEGIN_SRC emacs-lisp
     ;(global-set-key (kbd "<return>") 'newline)
     (define-prefix-command 'mymap)
     (global-set-key (kbd "C-c m") 'mymap)
     #+END_SRC
*** Often used files
    #+begin_src emacs-lisp
    (define-key mymap (kbd "f m") (lambda () (interactive) (find-file "~/myorg.org")))   
    (define-key mymap (kbd "f s") (lambda () (interactive) (find-file "~/shopping.org")))   
    (define-key mymap (kbd "f c") (lambda () (interactive) (find-file "~/.emacs.d/configuration.org")))
    (define-key mymap (kbd "f x") (lambda () (interactive) (find-file "~/.xmonad/xmonad.hs")))
    (define-key mymap (kbd "f a") (lambda () (interactive) (find-file "~/org-diss/dissertation.org")))
    #+END_SRC
*** Swap windows
    Funciton using ace-window
    #+BEGIN_SRC emacs-lisp
      (defun swap-windows-custom ()
	"Swap two windows and move back to original"
	(interactive)
	(ace-swap-window)
	(aw-flip-window))
      (define-key mymap (kbd "w s") 'swap-windows-custom)
      (use-package buffer-move
	:ensure t
	:config
	(global-set-key (kbd "<S-s-up>") 'buf-move-up)
	(global-set-key (kbd "<S-s-left>") 'buf-move-left)
	(global-set-key (kbd "<S-s-down>") 'buf-move-down)
	(global-set-key (kbd "<S-s-right>") 'buf-move-right))
    #+end_src
*** COMMENT Transpose Windows
    #+begin_src emacs-lisp
    (use-package transpose-frame
      :ensure t)
    (define-key mymap (kbd "w t") 'transpose-frame)
    #+end_src
*** Indention
    #+BEGIN_SRC emacs-lisp
      (defun my/indent ()
	"Indent line and move to next line"
	(interactive)
	(indent-for-tab-command)
	(beginning-of-line)
	(next-line))
      (define-key mymap (kbd "i") 'my/indent)
    #+END_SRC
    
*** COMMENT Languagetool
    #+begin_src emacs-lisp
    (define-key mymap (kbd "l l") 'langtool-check)
    (define-key mymap (kbd "l d") 'langtool-check-done)
    (define-key mymap (kbd "l s") 'langtool-switch-default-language)
    (define-key mymap (kbd "l m") 'langtool-show-message-at-point)
    (define-key mymap (kbd "l c") 'langtool-correct-buffer)
    (define-key mymap (kbd "l n") 'langtool-goto-next-error)
    (define-key mymap (kbd "l p") 'langtool-goto-previous-error)
    #+end_src
*** COMMENT Comment line
    #+BEGIN_SRC emacs-lisp
    (define-key mymap (kbd "c") 'comment-line)
    #+END_SRC
    
*** COMMENT mu4e
    #+BEGIN_SRC emacs-lisp
    (define-key mymap (kbd "m") 'mu4e)
    #+END_SRC
** More evil-leader
   #+begin_src emacs-lisp
     (evil-leader/set-key "." 'find-file)
     (evil-leader/set-key "u" 'universal-argument)
     (evil-leader/set-key "bb" 'switch-to-buffer)
     (evil-leader/set-key "bl" 'ibuffer)
     (evil-leader/set-key "bk" 'kill-buffer)
     (evil-leader/set-key "ti" 'org-inlinetask-insert-task)
     (evil-leader/set-key "tt" 'org-todo)
     (evil-leader/set-key "a" 'org-agenda)
     (evil-leader/set-key "m" 'mu4e)
     (evil-leader/set-key "c" 'comment-line)
     (evil-leader/set-key "ll" 'langtool-check)
     (evil-leader/set-key "ld" 'langtool-check-done)
     (evil-leader/set-key "ls" 'langtool-switch-default-language)
     (evil-leader/set-key "lm" 'langtool-show-message-at-point)
     (evil-leader/set-key "lc" 'langtool-correct-buffer)
     (evil-leader/set-key "ln" 'langtool-goto-next-error)
     (evil-leader/set-key "lp" 'langtool-goto-previous-error)
     (evil-leader/set-key "i" 'my/indent)
     (evil-leader/set-key "wt" 'transpose-frame)
     ;; often used files
     (evil-leader/set-key "fm" (lambda () (interactive) (find-file "~/myorg.org")))
     (evil-leader/set-key "fs" (lambda () (interactive) (find-file "~/shopping.org")))
     (evil-leader/set-key "fc" (lambda () (interactive) (find-file "~/.emacs.d/configuration.org")))
     (evil-leader/set-key "fx" (lambda () (interactive) (find-file "~/.xmonad/xmonad.hs")))
     (evil-leader/set-key "fq" (lambda () (interactive) (find-file "~/.config/qtile/config.py")))
     (evil-leader/set-key "fa" (lambda () (interactive) (find-file "~/org-diss/dissertation.org")))
     (evil-leader/set-key "fl" (lambda () (interactive) (find-file "~/Nextcloud/Privat/Ledger/ledger.dat")))
     (evil-leader/set-key "fp" (lambda () (interactive) (find-file "~/org-diss/paper3.org")))
     (evil-leader/set-key-for-mode 'org-mode
       "od" 'org-deadline
       "os" 'org-schedule
       "ota" 'org-time-stamp
       "oti" 'org-time-stamp-inactive
       "oa" 'org-archive-subtree-default-with-confirmation
       "ox" 'org-export-dispatch
       "r" 'org-ref-insert-cite-link)
     (evil-leader/set-key-for-mode 'org-agenda-mode
       "od" 'org-agenda-deadline
       "os" 'org-agenda-schedule
       "vd" 'org-agenda-day-view)
     ;; (evil-leader/set-key "g" 'magit-status)
     (evil-leader/set-key "gg" 'magit-status-with-removed-dotfiles-args)
     (evil-leader/set-key "gf" 'magit-file-dispatch)
     (evil-leader/set-key "gd" 'dotfiles-magit-status)
     ;; projectile
     (evil-leader/set-key "pp" 'counsel-projectile-switch-project)
     (evil-leader/set-key "p." 'counsel-projectile-find-file)
     (evil-leader/set-key "p" 'projectile-command-map)
     ;; delete whitespace
     (evil-leader/set-key "dt" 'delete-trailing-whitespace)
     ;; elpy
     (evil-leader/set-key "egd" 'elpy-goto-definition)
     (evil-leader/set-key "ev" 'pyvenv-workon)
     (evil-leader/set-key "eb" 'elpy-black-fix-code)
     ;;devdocs
     (evil-leader/set-key "dd" 'devdocs-lookup)
     (evil-leader/set-key "di" 'devdocs-install)
     (evil-leader/set-key "du" 'devdocs-update-all)
     ;evil-window
     (evil-leader/set-key "ww" 'evil-window-next)
     (evil-leader/set-key "wl" 'evil-window-left)
     (evil-leader/set-key "wr" 'evil-window-right)
     (evil-leader/set-key "wk" 'evil-window-up)
     (evil-leader/set-key "wj" 'evil-window-down)
   #+end_src

** F-Keys
   #+begin_src emacs-lisp
     (global-set-key [f5] 'revert-buffer)
     (global-set-key [f7] 'display-fill-column-indicator-mode)
     (global-set-key [f8] (lambda () (interactive) (setq show-trailing-whitespace (not show-trailing-whitespace))))
     (global-set-key [f9] 'auto-highlight-symbol-mode)
     (global-unset-key [f10])
     (global-set-key [f10] 'darkroom-mode)
     (global-set-key [f11] (lambda () (interactive) (load-theme 'doom-vibrant t)))
     (global-set-key [f12] (lambda () (interactive) (load-theme 'doom-one-light t)))
   #+end_src

** Org- Agenda from everywhere
   #+BEGIN_SRC emacs-lisp
   (global-set-key "\C-ca" 'org-agenda)
   #+END_SRC
** COMMENT Duplicate line
   -- ditched in favor of evil
   #+BEGIN_SRC emacs-lisp
   (defun duplicate-line-up ()
     (interactive)
     (move-beginning-of-line 1)
     (kill-line)
     (yank)
     (next-line -1)
     (open-line 1)
     (next-line 1)
     (yank)
   )
   (defun duplicate-line-down ()
     (interactive)
     (move-beginning-of-line 1)
     (kill-line)
     (yank)
     (open-line 1)
     (next-line 1)
     (yank)
   )
   (global-set-key (kbd "<M-S-up>") 'duplicate-line-up)
   (global-set-key (kbd "<M-S-down>") 'duplicate-line-down)
   (global-unset-key (kbd "C-S-d"))
   (global-set-key (kbd "C-S-d") 'duplicate-line-down)
   #+END_SRC
** COMMENT Comment for german keyboard-layout
   #+begin_src emacs-lisp
   (global-set-key (kbd "<C-x C-S-,>") 'comment-line)
   #+end_src
** Kill Daemon
   #+begin_src emacs-lisp
     ;; define function to shutdown emacs server instance
     (defun server-shutdown ()
       "Save buffers, Quit, and Shutdown (kill) server"
       (interactive)
       (save-some-buffers)
       (kill-emacs)
       )
     (global-unset-key (kbd "C-x C-q"))
     (global-set-key (kbd "C-x C-q") 'server-shutdown)
   #+end_src
